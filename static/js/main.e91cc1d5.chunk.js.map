{"version":3,"sources":["types/Status.ts","types/FilterAction.tsx","features/currentTodo.ts","features/filter.ts","types/TodoAction.tsx","features/todos.ts","app/store.ts","app/hooks.ts","api.ts","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["Status","FilterAction","actions","todo","type","payload","currentTodoReducer","state","action","TodosAction","status","SetStatus","query","SetQuery","initialState","ALL","filterReducer","loadTodos","SetTodos","hasError","SetError","isLoading","SetIsLoading","todos","todosReducer","rootReducer","combineReducers","currentTodo","filter","store","createStore","composeWithDevTools","applyMiddleware","thunk","useAppDispatch","useDispatch","useAppSelector","useSelector","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","TodoList","dispatch","visibleTodos","filterType","ACTIVE","completed","COMPLETED","title","toLowerCase","includes","getVisibleTodos","length","className","map","id","classNames","onClick","currentAction","handleOnSelect","TodoFilter","handleQuery","newQuery","filterAction","statusValues","Object","values","onSubmit","event","preventDefault","value","onChange","newStatus","target","placeholder","style","pointerEvents","Loader","TodoModal","useState","setIsLoading","isError","setIsError","user","setUser","handleModal","a","userId","getUserFromServer","useEffect","TodoAction","href","email","name","App","getTodosFromServer","todosFromServer","Root","ReactDOM","render","document","getElementById"],"mappings":"kMAAYA,ECAAC,E,wDCoBCC,EANG,SAACC,GAAD,MAAgC,CAC9CC,KAAM,kBACNC,QAASF,IAIED,EARM,iBAAyB,CAAEE,KAAM,uBA6BrCE,EAhBY,WAGd,IAFXC,EAEU,uDAFK,KACfC,EACU,uCACV,OAAQA,EAAOJ,MACX,IAAK,kBACH,OAAOI,EAAOH,QAEhB,IAAK,qBACH,OAAO,KAET,QACE,OAAOE,I,iBFrCHP,K,UAAAA,E,gBAAAA,E,uBAAAA,M,cCAAC,K,6BAAAA,E,2BAAAA,E,gCAAAA,M,KEqBZ,ICrBYQ,EDmCCP,EAdK,SAACQ,GAAD,MAAsC,CACtDN,KAAMH,EAAaU,UACnBN,QAASK,IAYER,EATI,SAACU,GAAD,MAAoC,CACnDR,KAAMH,EAAaY,SACnBR,QAASO,IAcLE,EAAe,CACnBJ,OAAQV,EAAOe,IACfH,MAAO,IA+BMI,EA5BO,WAGT,IAFXT,EAEU,uDAFKO,EACfN,EACU,uCACV,OAAQA,EAAOJ,MACb,IAAK,mBACH,OAAO,2BACFG,GADL,IAEEG,OAAQF,EAAOH,UAGnB,IAAK,kBACH,OAAO,2BACFE,GADL,IAEEK,MAAOJ,EAAOH,UAGlB,IAAK,oBACH,OAAO,2BACFE,GADL,IAEEK,MAAO,KAGX,QACE,OAAOL,I,kBCvEDE,K,0BAAAA,E,0BAAAA,E,mCAAAA,M,KCsBZ,IAeaP,EAfI,SAACe,GAAD,MAAuC,CACtDb,KAAMK,EAAYS,SAClBb,QAASY,IAaEf,EAVI,SAACiB,GAAD,MAAwC,CACvDf,KAAMK,EAAYW,SAClBf,QAASc,IAQEjB,EALM,SAACmB,GAAD,MAA6C,CAC9DjB,KAAMK,EAAYa,aAClBjB,QAASgB,IAWLP,EAAe,CACnBS,MAAO,GACPJ,UAAU,EACVE,WAAW,GA+BEG,EA5BM,WAGR,IAFXjB,EAEU,uDAFKO,EACfN,EACU,uCACV,OAAQA,EAAOJ,MACb,IAAK,iBACH,OAAO,2BACFG,GADL,IAEEgB,MAAM,YAAKf,EAAOH,WAGtB,IAAK,iBACH,OAAO,2BACFE,GADL,IAEEY,SAAUX,EAAOH,UAGrB,IAAK,qBACH,OAAO,2BACFE,GADL,IAEEc,UAAWb,EAAOH,UAGtB,QACE,OAAOE,ICnEPkB,EAAcC,0BAAgB,CAClCC,YAAarB,EACbsB,OAAQZ,EACRO,MAAOC,IAIIK,EAAQC,sBACnBL,EACAM,8BACEC,0BAAgBC,O,+BCfPC,G,kBAAoCC,KACpCC,EAAkDC,ICQ/D,SAASC,EAAOC,GAEd,IARYC,EAQNC,EAVS,iEAUYF,EAAM,QAEjC,OAVYC,EAUA,IATL,IAAIE,SAAQ,SAAAC,GACjBC,WAAWD,EAASH,OASnBK,MAAK,kBAAMC,MAAML,MACjBI,MAAK,SAAAE,GAAG,OAAIA,EAAIC,UAGd,I,uBCcMC,EAAqB,WAChC,IAAQ1B,EAAUa,GAAsB,SAAA7B,GAAK,OAAIA,EAAMgB,SAA/CA,MACFK,EAASQ,GAAe,SAAA7B,GAAK,OAAIA,EAAMqB,UACvCD,EAAcS,GAAe,SAAA7B,GAAK,OAAIA,EAAMoB,eAC5CuB,EAAWhB,IAEXiB,EAjCgB,SACtB5B,EACA6B,EACAxC,GAEA,IAAIuC,EAAoB,YAAO5B,GAE/B,OAAQ6B,GACN,KAAKpD,EAAOqD,OACVF,EAAeA,EAAavB,QAAO,SAAAzB,GAAI,OAAKA,EAAKmD,aACjD,MAEF,KAAKtD,EAAOuD,UACVJ,EAAeA,EAAavB,QAAO,SAAAzB,GAAI,OAAIA,EAAKmD,aAOpD,OAAOH,EAAavB,QAClB,SAAAzB,GAAI,OAAIA,EAAKqD,MAAMC,cAAcC,SAC/B9C,EAAM6C,kBAWWE,CAAgBpC,EAAOK,EAAOlB,OAAQkB,EAAOhB,OAMlE,OACE,mCACoB,IAAjBW,EAAMqC,OAEH,qBAAKC,UAAU,yBAAf,iDAIA,wBAAOA,UAAU,+BAAjB,UACE,gCACE,+BACE,mCACA,6BACE,sBAAMA,UAAU,OAAhB,SACE,mBAAGA,UAAU,qBAGjB,uCACA,wCAIJ,gCACGV,EAAaW,KAAI,SAAC3D,GACjB,IACE4D,EAGE5D,EAHF4D,GACAP,EAEErD,EAFFqD,MACAF,EACEnD,EADFmD,UAGF,OACE,qBACE,UAAQ,OADV,UAIE,oBAAIO,UAAU,eAAd,SACGE,IAGH,oBAAIF,UAAU,eAAd,SACGP,GACC,sBAAMO,UAAU,OAAO,UAAQ,gBAA/B,SACE,mBAAGA,UAAU,qBAKnB,oBAAIA,UAAU,2BAAd,SACE,mBAAGA,UAAWG,IACZ,CACE,mBAAoBV,EACpB,mBAAoBA,IAHxB,SAOGE,MAIL,oBAAIK,UAAU,8BAAd,SACE,wBACE,UAAQ,eACRA,UAAU,SACVzD,KAAK,SACL6D,QAAS,kBApER,SAAC9D,GACtB+C,EAASgB,EAAsB/D,IAmEIgE,CAAehE,IAJhC,SAME,sBAAM0D,UAAU,OAAhB,SACE,mBAAGA,UAAWG,IAAW,MAAO,CAC9B,UAAWrC,EACX,eAAgBA,cApCnBoC,cC3EZK,EAAuB,WAClC,MAA0BhC,GAAe,SAAA7B,GAAK,OAAIA,EAAMqB,UAAhDhB,EAAR,EAAQA,MAAOF,EAAf,EAAeA,OACTwC,EAAWhB,IAMXmC,EAAc,SAACC,GACnBpB,EAASqB,EAAsBD,KAG3BE,EAAeC,OAAOC,OAAO1E,GAEnC,OACE,uBACE6D,UAAU,mBACVc,SAAU,SAAAC,GAAK,OAAIA,EAAMC,kBAF3B,UAIE,mBAAGhB,UAAU,UAAb,SACE,sBAAMA,UAAU,SAAhB,SACE,wBACEA,UAAU,cACV,UAAQ,eACRiB,MAAOpE,EACPqE,SAAU,SAACH,GAAD,OArBEI,EAqBsBJ,EAAMK,OAAOH,WApBvD5B,EAASqB,EAAuBS,IADb,IAACA,GAiBd,SAMGR,EAAaV,KAAI,SAACV,GAAD,OAChB,wBAEE0B,MAAO1B,EAFT,SAIGA,GAHIA,YAUf,oBAAGS,UAAU,qDAAb,UACA,uBACI,UAAQ,cACRzD,KAAK,OACLyD,UAAU,QACVqB,YAAY,YACZJ,MAAOlE,EACPmE,SAAU,SAACH,GAAD,OAAWP,EAAYO,EAAMK,OAAOH,UAEhD,sBAAMjB,UAAU,eAAhB,SACE,mBAAGA,UAAU,8BAGdjD,GACC,sBAAMiD,UAAU,gBAAgBsB,MAAO,CAAEC,cAAe,OAAxD,SACE,wBACE,UAAQ,oBACR,aAAW,cACXhF,KAAK,SACLyD,UAAU,SACVI,QAAS,kBAAMI,EAAY,gB,OC7D5BgB,G,MAAmB,kBAC9B,qBAAKxB,UAAU,SAAS,UAAQ,SAAhC,SACE,qBAAKA,UAAU,wBCGNyB,EAAsB,WACjC,IAAM3D,EAAcS,GAAe,SAAA7B,GAAK,OAAIA,EAAMoB,eAClD,EAAkC4D,oBAAS,GAA3C,mBAAOlE,EAAP,KAAkBmE,EAAlB,KACA,EAA8BD,oBAAS,GAAvC,mBAAOE,EAAP,KAAgBC,EAAhB,KACA,EAAwBH,mBAAsB,MAA9C,mBAAOI,EAAP,KAAaC,EAAb,KACM1C,EAAWhB,IAEX2D,EAAW,uCAAG,4BAAAC,EAAA,yDACbnE,EADa,wDAKlB6D,GAAa,GALK,kBJQEO,EIAsBpE,EAAYoE,OJAfzD,EAAG,iBAAiByD,IIRzC,OAQVC,EARU,OAUhBJ,EAAQI,GAVQ,kDAYhBN,GAAW,GAZK,yBAchBF,GAAa,GAdG,+CJQC,IAACO,IIRF,2BAAH,qDAsBjB,OAJAE,qBAAU,WACRJ,MACC,IAGD,sBAAKhC,UAAU,kBAAkB,UAAQ,QAAzC,UACE,qBAAKA,UAAU,qBAEdxC,GAAc,cAAC,EAAD,KAEbA,IAAcoE,GACd,sBAAK5B,UAAU,aAAf,UACE,yBAAQA,UAAU,kBAAlB,UACE,qBACEA,UAAU,0CACV,UAAQ,eAFV,gCAIYlC,QAJZ,IAIYA,OAJZ,EAIYA,EAAaoC,MAGzB,wBACE3D,KAAK,SACL,aAAW,cACXyD,UAAU,SACV,UAAQ,cACRI,QAAS,kBAAMf,EAASgD,WAI5B,sBAAKrC,UAAU,kBAAf,UACE,mBAAGA,UAAU,QAAQ,UAAQ,cAA7B,gBACGlC,QADH,IACGA,OADH,EACGA,EAAa6B,QAGhB,oBAAGK,UAAU,QAAQ,UAAQ,aAA7B,UACE,wBAAQA,UAAWG,IAAW,CAC5B,0BAAoBrC,QAApB,IAAoBA,OAApB,EAAoBA,EAAa2B,UACjC,oBAAmB,OAAC3B,QAAD,IAACA,KAAa2B,aAFnC,SAKc,OAAX3B,QAAW,IAAXA,KAAa2B,UACV,OACA,YAGL,OAED,mBAAG6C,KAAI,wBAAYR,QAAZ,IAAYA,OAAZ,EAAYA,EAAMS,OAAzB,gBACGT,QADH,IACGA,OADH,EACGA,EAAMU,oBCpEVC,EAAgB,WAC3B,MAA+BlE,GAAe,SAAA7B,GAAK,OAAIA,KAA/CgB,EAAR,EAAQA,MAAOI,EAAf,EAAeA,YACTuB,EAAWhB,IACTb,EAAcE,EAAdF,UAEFkF,EAAkB,uCAAG,4BAAAT,EAAA,+ELGCxD,EAAY,UKHb,OAEjBkE,EAFiB,OAIvBtD,EAASgD,EAAoBM,IAJN,gDAMvBtD,EAASgD,GAAoB,IANN,yBAQvBhD,EAASgD,GAAsB,IARR,4EAAH,qDAgBxB,OAJAD,qBAAU,WACRM,MACC,IAGD,qCACE,qBAAK1C,UAAU,UAAf,SACE,qBAAKA,UAAU,YAAf,SACE,sBAAKA,UAAU,MAAf,UACE,oBAAIA,UAAU,QAAd,oBAEA,qBAAKA,UAAU,QAAf,SACE,cAAC,EAAD,MAGF,qBAAKA,UAAU,QAAf,SACGxC,EAEG,cAAC,EAAD,IAEA,cAAC,EAAD,aAOXM,GACC,cAAC,EAAD,QCjDF8E,EAAO,kBACX,cAAC,IAAD,CAAU5E,MAAOA,EAAjB,SACE,cAAC,IAAD,UACE,cAAC,EAAD,SAKN6E,IAASC,OAAO,cAAC,EAAD,IAAUC,SAASC,eAAe,W","file":"static/js/main.e91cc1d5.chunk.js","sourcesContent":["export enum Status {\n  ALL = 'all',\n  ACTIVE = 'active',\n  COMPLETED = 'completed',\n}\n","export enum FilterAction {\n  SetStatus = 'filter/setStatus',\n  SetQuery = 'filter/setQuery',\n  ClearQuery = 'filter/clearQuery',\n}","import { Todo } from '../types/Todo';\n\n// we use string literal as a type to avoid mistype in future\ntype RemoveTodoAction = { type: 'currentTodo/REMOVE' };\n\n// payload is a typical name for an action data\ntype SetTodoAction = {\n  type: 'currentTodo/SET';\n  payload: Todo;\n};\n\n// Action creator return type protect us from a mistype\nconst removeTodo = (): RemoveTodoAction => ({ type: 'currentTodo/REMOVE' });\n\nconst setTodo = (todo: Todo): SetTodoAction => ({\n  type: 'currentTodo/SET',\n  payload: todo,\n});\n\n// These actions will be used in the application\nexport const actions = { setTodo, removeTodo };\n\ntype State = Todo | null;\ntype Action = SetTodoAction | RemoveTodoAction;\n\nconst currentTodoReducer = (\n  state: State = null,\n  action: Action,\n): State => {\n  switch (action.type) {\n      case 'currentTodo/SET':\n        return action.payload;\n  \n      case 'currentTodo/REMOVE':\n        return null;\n  \n      default:\n        return state;\n  }\n};\n\nexport default currentTodoReducer;\n","import { Status } from '../types/Status';\nimport { FilterAction } from '../types/FilterAction';\n\ntype SetStatusAction = {\n  type: FilterAction.SetStatus;\n  payload: Status;\n};\n\ntype SetQueryAction = {\n  type: FilterAction.SetQuery;\n  payload: string;\n};\n\ntype ClearQueryAction = {\n  type: FilterAction.ClearQuery;\n};\n\ntype Action = SetStatusAction\n| SetQueryAction\n| ClearQueryAction;\n\nconst setStatus = (status: Status): SetStatusAction => ({\n  type: FilterAction.SetStatus,\n  payload: status,\n});\n\nconst setQuery = (query: string): SetQueryAction => ({\n  type: FilterAction.SetQuery,\n  payload: query,\n});\n\nconst clearQuery = (): ClearQueryAction => ({\n  type: FilterAction.ClearQuery,\n});\n\nexport const actions = { setStatus, setQuery, clearQuery };\n\ntype State = {\n  status: Status,\n  query: string;\n};\n\nconst initialState = {\n  status: Status.ALL,\n  query: ''\n};\n\nconst filterReducer = (\n  state: State = initialState,\n  action: Action,\n): State => {\n  switch (action.type) {\n    case 'filter/setStatus':\n      return {\n        ...state,\n        status: action.payload,\n      };\n\n    case 'filter/setQuery':\n      return {\n        ...state,\n        query: action.payload,\n      };\n\n    case 'filter/clearQuery':\n      return {\n        ...state,\n        query: '',\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default filterReducer;\n","export enum TodosAction {\n  SetTodos = 'todos/setTodos',\n  SetError = 'todos/setError',\n  SetIsLoading = 'todos/setIsLoading',\n}\n","import { Todo } from '../types/Todo';\nimport { TodosAction } from '../types/TodoAction';\n\ntype SetTodoAction = {\n  type: TodosAction.SetTodos;\n  payload: Todo[];\n};\n\ntype SetErrorAction = {\n  type: TodosAction.SetError;\n  payload: boolean;\n};\n\ntype SetIsLoadingAction = {\n  type: TodosAction.SetIsLoading;\n  payload: boolean;\n};\n\ntype Action = SetTodoAction\n| SetErrorAction\n| SetIsLoadingAction;\n\nconst setTodos = (loadTodos: Todo[]): SetTodoAction => ({\n  type: TodosAction.SetTodos,\n  payload: loadTodos,\n});\n\nconst setError = (hasError: boolean): SetErrorAction => ({\n  type: TodosAction.SetError,\n  payload: hasError,\n});\n\nconst setLoading = (isLoading: boolean): SetIsLoadingAction => ({\n  type: TodosAction.SetIsLoading,\n  payload: isLoading,\n});\n\nexport const actions = { setTodos, setError, setLoading };\n\nexport type State = {\n  todos: Todo[],\n  hasError: boolean,\n  isLoading: boolean,\n};\n\nconst initialState = {\n  todos: [],\n  hasError: false,\n  isLoading: false,\n};\n\nconst todosReducer = (\n  state: State = initialState,\n  action: Action,\n): State => {\n  switch (action.type) {\n    case 'todos/setTodos':\n      return {\n        ...state,\n        todos: [...action.payload],\n      };\n\n    case 'todos/setError':\n      return {\n        ...state,\n        hasError: action.payload,\n      };\n\n    case 'todos/setIsLoading':\n      return {\n        ...state,\n        isLoading: action.payload,\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default todosReducer;\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport currentTodoReducer from '../features/currentTodo';\nimport filterReducer from '../features/filter';\nimport todosReducer from '../features/todos';\n\nconst rootReducer = combineReducers({\n  currentTodo: currentTodoReducer,\n  filter: filterReducer,\n  todos: todosReducer,\n});\n\n// The `store` is passed to the Provider in `/src/index.tsx`\nexport const store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport { AppDispatch, RootState } from './store';\n\nexport const useAppDispatch: () => AppDispatch = useDispatch;\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React from 'react';\nimport classNames from 'classnames';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions as currentAction } from '../../features/currentTodo';\nimport { Todo } from '../../types/Todo';\nimport { Status } from '../../types/Status';\nimport { State } from '../../features/todos';\n\nconst getVisibleTodos = (\n  todos: Todo[],\n  filterType: Status,\n  query: string,\n): Todo[] => {\n  let visibleTodos: Todo[] = [...todos];\n\n  switch (filterType) {\n    case Status.ACTIVE:\n      visibleTodos = visibleTodos.filter(todo => !todo.completed);\n      break;\n\n    case Status.COMPLETED:\n      visibleTodos = visibleTodos.filter(todo => todo.completed);\n      break;\n\n    default:\n      break;\n  }\n\n  return visibleTodos.filter(\n    todo => todo.title.toLowerCase().includes(\n      query.toLowerCase(),\n    ),\n  );\n};\n\nexport const TodoList: React.FC = () => {\n  const { todos } = useAppSelector<State>(state => state.todos);\n  const filter = useAppSelector(state => state.filter);\n  const currentTodo = useAppSelector(state => state.currentTodo);\n  const dispatch = useAppDispatch();\n\n  const visibleTodos = getVisibleTodos(todos, filter.status, filter.query);\n\n  const handleOnSelect = (todo: Todo) => {\n    dispatch(currentAction.setTodo(todo));\n  };\n\n  return (\n    <>\n      {todos.length === 0\n        ? (\n          <div className=\"notification is-danger\">\n            An error occured when loading data!\n          </div>\n        ) : (\n          <table className=\"table is-narrow is-fullwidth\">\n            <thead>\n              <tr>\n                <th>#</th>\n                <th>\n                  <span className=\"icon\">\n                    <i className=\"fas fa-check\" />\n                  </span>\n                </th>\n                <th>Title</th>\n                <th> </th>\n              </tr>\n            </thead>\n\n            <tbody>\n              {visibleTodos.map((todo) => {\n                const {\n                  id,\n                  title,\n                  completed,\n                } = todo;\n\n                return (\n                  <tr\n                    data-cy=\"todo\"\n                    key={id}\n                  >\n                    <td className=\"is-vcentered\">\n                      {id}\n                    </td>\n\n                    <td className=\"is-vcentered\">\n                      {completed && (\n                        <span className=\"icon\" data-cy=\"iconCompleted\">\n                          <i className=\"fas fa-check\" />\n                        </span>\n                      )}\n                    </td>\n\n                    <td className=\"is-vcentered is-expanded\">\n                      <p className={classNames(\n                        {\n                          'has-text-success': completed,\n                          'has-text-danger': !completed,\n                        },\n                      )}\n                      >\n                        {title}\n                      </p>\n                    </td>\n\n                    <td className=\"has-text-right is-vcentered\">\n                      <button\n                        data-cy=\"selectButton\"\n                        className=\"button\"\n                        type=\"button\"\n                        onClick={() => handleOnSelect(todo)}\n                      >\n                        <span className=\"icon\">\n                          <i className={classNames('far', {\n                            'fa-eye': !currentTodo,\n                            'fa-eye-slash': currentTodo,\n                          })}\n                          />\n                        </span>\n                      </button>\n                    </td>\n                  </tr>\n                );\n              })}\n            </tbody>\n          </table>\n        )}\n    </>\n  );\n};","import React from 'react';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions as filterAction } from '../../features/filter';\nimport { Status } from '../../types/Status';\n\nexport const TodoFilter: React.FC = () => {\n  const { query, status } = useAppSelector(state => state.filter);\n  const dispatch = useAppDispatch();\n\n  const handleStatus = (newStatus: Status) => {\n    dispatch(filterAction.setStatus(newStatus));\n  };\n\n  const handleQuery = (newQuery: string) => {\n    dispatch(filterAction.setQuery(newQuery));\n  };\n\n  const statusValues = Object.values(Status);\n\n  return (\n    <form\n      className=\"field has-addons\"\n      onSubmit={event => event.preventDefault()}\n    >\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            className=\"select-type\"\n            data-cy=\"statusSelect\"\n            value={status}\n            onChange={(event) => handleStatus(event.target.value as Status)}\n          >\n            {statusValues.map((filterType) => (\n              <option\n                key={filterType}\n                value={filterType}\n              >\n                {filterType}\n              </option>\n            ))}\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n      <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={query}\n          onChange={(event) => handleQuery(event.target.value)}\n      />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        {query && (\n          <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n            <button\n              data-cy=\"clearSearchButton\"\n              aria-label=\"Mute volume\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={() => handleQuery('')}\n            />\n          </span>\n        )}\n      </p>\n    </form>\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useEffect, useState } from 'react';\nimport classNames from 'classnames';\nimport { Loader } from '../Loader';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions as TodoAction } from '../../features/currentTodo';\nimport { getUser } from '../../api';\nimport { User } from '../../types/User';\n\nexport const TodoModal: React.FC = () => {\n  const currentTodo = useAppSelector(state => state.currentTodo);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isError, setIsError] = useState(false);\n  const [user, setUser] = useState<User | null>(null);\n  const dispatch = useAppDispatch();\n\n  const handleModal = async () => {\n    if (!currentTodo) {\n      return;\n    }\n\n    setIsLoading(true);\n\n    try {\n      const getUserFromServer = await getUser(currentTodo.userId);\n\n      setUser(getUserFromServer);\n    } catch {\n      setIsError(true);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    handleModal();\n  }, []);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {isLoading && (<Loader />)}\n\n      {!isLoading && !isError && (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${currentTodo?.id}`}\n            </div>\n\n            <button\n              type=\"button\"\n              aria-label=\"Close modal\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={() => dispatch(TodoAction.removeTodo())}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {currentTodo?.title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              <strong className={classNames({\n                'has-text-success': currentTodo?.completed,\n                'has-text-danger': !currentTodo?.completed,\n              })}\n              >\n                {currentTodo?.completed\n                  ? 'Done'\n                  : 'Planned'}\n              </strong>\n\n              {' by '}\n\n              <a href={`mailto:${user?.email}`}>\n                {user?.name}\n              </a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};","/* eslint-disable max-len */\nimport React, { useEffect } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\nimport { useAppDispatch, useAppSelector } from './app/hooks';\nimport { getTodos } from './api';\nimport { actions as TodoAction } from './features/todos';\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\n\nexport const App: React.FC = () => {\n  const { todos, currentTodo } = useAppSelector(state => state);\n  const dispatch = useAppDispatch();\n  const { isLoading } = todos;\n\n  const getTodosFromServer = async () => {\n    try {\n      const todosFromServer = await getTodos();\n\n      dispatch(TodoAction.setTodos(todosFromServer));\n    } catch {\n      dispatch(TodoAction.setError(true));\n    } finally {\n      dispatch(TodoAction.setLoading(true));\n    }\n  };\n\n  useEffect(() => {\n    getTodosFromServer();\n  }, []);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter />\n            </div>\n\n            <div className=\"block\">\n              {isLoading\n                ? (\n                  <TodoList />\n                ) : (\n                  <Loader />\n                )}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {currentTodo && (\n        <TodoModal />\n      )}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport { store } from './app/store';\nimport { App } from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}